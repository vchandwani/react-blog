{"version":3,"sources":["components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["Post","props","useState","characterLength","setCharacterLength","fullRead","setFullRead","Col","xs","sm","className","onClick","clicked","Card","classNames","Body","Title","title","length","substring","Text","content","Button","variant","FullPost","state","loadedPost","deletePostHandler","axios","delete","id","then","response","console","log","this","get","setState","data","post","style","textAlign","body","Component","NewPost","author","postDataHandler","Form","Row","Group","as","md","Label","Control","type","value","onChange","event","target","rows","Blog","posts","setPosts","postsDisplay","setPostsDisplay","selectedPostId","setSelectedPostId","displayCount","setDisplayCount","useEffect","updatedPosts","map","slice","postsDisplayDiv","key","classes","App","Container","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4d2c040c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {Col,Card,Button } from 'react-bootstrap'\r\nimport './Post.css';\r\nimport classNames from 'classnames';\r\n\r\nconst Post = (props) => {\r\n    const [characterLength, setCharacterLength] = useState(20);\r\n    const [fullRead, setFullRead] = useState(false);\r\n\r\n    const readMore = () => {\r\n        setCharacterLength(255);\r\n        setFullRead(true);\r\n    }\r\n\r\n    return (\r\n        <Col xs={12} sm={4} className={\"mt-1 mb-1\"} onClick={props.clicked}>\r\n            <Card className={classNames(\"PostDiv\" , fullRead && \"Height100\")}>\r\n                <Card.Body>\r\n                    <Card.Title>{props.title.length > characterLength ? props.title.substring(0, characterLength) : props.title}</Card.Title>\r\n                    <Card.Text>\r\n                        {props.content.length > characterLength ? props.content.substring(0, characterLength) : props.content}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                <Card.Body>\r\n                    <Button className=\"ReadMore\" variant=\"primary\" onClick={readMore}>Read more</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Col} from 'react-bootstrap'\r\n\r\nimport './FullPost.css';\r\n\r\nclass FullPost extends Component {\r\n    state = {\r\n        loadedPost: null\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        if ( this.props.id ) {\r\n            if ( !this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id !== this.props.id) ) {\r\n                axios.get( 'https://jsonplaceholder.typicode.com/posts/' + this.props.id )\r\n                    .then( response => {\r\n                        // console.log(response);\r\n                        this.setState( { loadedPost: response.data } );\r\n                    } );\r\n            }\r\n        }\r\n    }\r\n    deletePostHandler = () =>{\r\n        axios.delete('https://jsonplaceholder.typicode.com/posts/'+this.props.id).then(\r\n            response => {\r\n                console.log(response);\r\n            });\r\n    }\r\n\r\n    render () {\r\n        let post = <p style={{ textAlign: 'center' }}>Please select a Post!</p>;\r\n        if ( this.props.id ) {\r\n            post = <p style={{ textAlign: 'center' }}>Loading...!</p>;\r\n        }\r\n        if ( this.state.loadedPost ) {\r\n            post = (\r\n                <Col className=\"FullPost\">\r\n                    <h6>{this.state.loadedPost.title}</h6>\r\n                    <p>{this.state.loadedPost.body}</p>\r\n                    <div className=\"Edit\">\r\n                        <button onClick={this.deletePostHandler} className=\"Delete\">Delete</button>\r\n                    </div>\r\n                </Col>\r\n\r\n            );\r\n        }\r\n        return post;\r\n    }\r\n}\r\n\r\nexport default FullPost;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Row, Col, Button, Form } from 'react-bootstrap'\r\n\r\nimport './NewPost.css';\r\n\r\nclass NewPost extends Component {\r\n    state = {\r\n        title: '',\r\n        content: '',\r\n        author: 'Varun'\r\n    }\r\n\r\n    postDataHandler = () => {\r\n        const data = {\r\n            title: this.state.title,\r\n            content: this.state.content,\r\n            author : this.state.author \r\n        }\r\n        axios.post('https://jsonplaceholder.typicode.com/posts/',data)\r\n        .then(response => {\r\n            \r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Col className=\"NewPost\">\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col xs={12}>Add a Post</Col>\r\n                        <Form.Group as={Col} md=\"4\" xs=\"12\">\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})}\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} md=\"4\" xs=\"12\">\r\n                            <Form.Label>Content</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={3} value={this.state.content} onChange={(event) => this.setState({content: event.target.value})}/>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} md=\"4\" xs=\"12\">\r\n                            <Form.Label>Author</Form.Label>\r\n                            <Form.Control as=\"select\" value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\r\n                                <option value=\"Varun\">Varun</option>\r\n                                <option value=\"Manu\">Manu</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Col xs={12}>\r\n                            <Button onClick={this.postDataHandler}>Add Post</Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Col>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewPost;","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {Col, Row, Button} from 'react-bootstrap'\r\nimport Post from '../../components/Post/Post';\r\nimport FullPost from '../../components/FullPost/FullPost';\r\nimport NewPost from '../../components/NewPost/NewPost';\r\nimport './Blog.css';\r\n\r\nconst Blog = () => {\r\n\r\n    const [posts, setPosts] = useState([]);\r\n    const [postsDisplay, setPostsDisplay] = useState([]);\r\n    const [selectedPostId, setSelectedPostId] = useState(null);\r\n    const [displayCount, setDisplayCount] = useState(4);\r\n\r\n    useEffect(() => {\r\n        axios.get( 'https://jsonplaceholder.typicode.com/posts' )\r\n        .then( response => {\r\n            const postsResponse = response.data;\r\n            const updatedPosts = postsResponse.map(post => {\r\n                return {\r\n                    ...post,\r\n                    author: 'Varun'\r\n                }\r\n            });\r\n            setPosts(updatedPosts);\r\n            // console.log( response );\r\n        } );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setPostsDisplay(posts.slice(0, displayCount));\r\n    }, [posts, displayCount ]);\r\n\r\n\r\n    const postSelectedHandler = (id)  => {\r\n        setSelectedPostId(id);\r\n    }\r\n    \r\n    const loadMore = () => {\r\n        setDisplayCount(displayCount+4);\r\n    }\r\n\r\n    const postsDisplayDiv = postsDisplay.map(post => {\r\n        return <Post \r\n            key={post.id} \r\n            title={post.title} \r\n            author={post.author}\r\n            content={post.body}\r\n            clicked={() => postSelectedHandler(post.id)} />;\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col xs={12}><h2>Add Articles</h2></Col>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={12}><p>Articles can be added with title and content</p></Col>\r\n            </Row>\r\n            <Row>\r\n                {postsDisplayDiv}\r\n            </Row>\r\n            <Row>\r\n                <Col className=\"LoadMoreDiv\">\r\n                    <Button classes={\"LoadMore\"} variant=\"secondary\" onClick={()=>loadMore()}> Load More </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <FullPost id={selectedPostId} />\r\n            </Row>\r\n            <Row>\r\n                <NewPost />\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Blog;","import React, { Component } from 'react';\r\n\r\nimport Blog from './containers/Blog/Blog';\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Blog />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render( <App />, document.getElementById( 'root' ) );\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}