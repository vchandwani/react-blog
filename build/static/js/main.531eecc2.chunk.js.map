{"version":3,"sources":["components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["Post","props","useState","characterLength","setCharacterLength","fullRead","setFullRead","Col","xs","sm","className","onClick","clicked","data-test","Card","classNames","Body","Title","title","length","substring","Text","content","Button","variant","FullPost","state","loadedPost","deletePostHandler","axios","delete","id","then","response","console","log","this","get","setState","data","post","style","textAlign","body","Component","NewPost","author","postDataHandler","Form","Row","Group","as","md","Label","Control","type","value","onChange","event","target","rows","Blog","posts","setPosts","postsDisplay","setPostsDisplay","selectedPostId","setSelectedPostId","displayCount","setDisplayCount","useEffect","updatedPosts","map","slice","postsDisplayDiv","key","classes","App","Container","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.531eecc2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Col, Card, Button } from \"react-bootstrap\";\nimport \"./Post.css\";\nimport classNames from \"classnames\";\n\nconst Post = (props) => {\n\tconst [characterLength, setCharacterLength] = useState(20);\n\tconst [fullRead, setFullRead] = useState(false);\n\n\tconst readMore = () => {\n\t\tsetCharacterLength(255);\n\t\tsetFullRead(true);\n\t};\n\n\treturn (\n\t\t<Col\n\t\t\txs={12}\n\t\t\tsm={4}\n\t\t\tclassName={\"mt-1 mb-1\"}\n\t\t\tonClick={props.clicked}\n\t\t\tdata-test=\"post-div\"\n\t\t>\n\t\t\t<Card className={classNames(\"PostDiv\", fullRead && \"Height100\")}>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<Card.Title data-test=\"post-title\">\n\t\t\t\t\t\t{props.title.length > characterLength\n\t\t\t\t\t\t\t? props.title.substring(0, characterLength)\n\t\t\t\t\t\t\t: props.title}\n\t\t\t\t\t</Card.Title>\n\t\t\t\t\t<Card.Text data-test=\"post-content\">\n\t\t\t\t\t\t{props.content.length > characterLength\n\t\t\t\t\t\t\t? props.content.substring(0, characterLength)\n\t\t\t\t\t\t\t: props.content}\n\t\t\t\t\t</Card.Text>\n\t\t\t\t</Card.Body>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tdata-test=\"post-button\"\n\t\t\t\t\t\tclassName=\"ReadMore\"\n\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\tonClick={readMore}\n\t\t\t\t\t>\n\t\t\t\t\t\tRead more\n\t\t\t\t\t</Button>\n\t\t\t\t</Card.Body>\n\t\t\t</Card>\n\t\t</Col>\n\t);\n};\n\nexport default Post;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Col } from \"react-bootstrap\";\n\nimport \"./FullPost.css\";\n\nclass FullPost extends Component {\n\tstate = {\n\t\tloadedPost: null,\n\t};\n\n\tcomponentDidUpdate() {\n\t\tif (this.props.id) {\n\t\t\tif (\n\t\t\t\t!this.state.loadedPost ||\n\t\t\t\t(this.state.loadedPost && this.state.loadedPost.id !== this.props.id)\n\t\t\t) {\n\t\t\t\taxios\n\t\t\t\t\t.get(\"https://jsonplaceholder.typicode.com/posts/\" + this.props.id)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t// console.log(response);\n\t\t\t\t\t\tthis.setState({ loadedPost: response.data });\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tdeletePostHandler = () => {\n\t\taxios\n\t\t\t.delete(\"https://jsonplaceholder.typicode.com/posts/\" + this.props.id)\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response);\n\t\t\t});\n\t};\n\n\trender() {\n\t\tlet post = (\n\t\t\t<p data-test=\"noResult-div\" style={{ textAlign: \"center\" }}>\n\t\t\t\tPlease select a Post!\n\t\t\t</p>\n\t\t);\n\t\tif (this.props.id) {\n\t\t\tpost = (\n\t\t\t\t<p data-test=\"loading-div\" style={{ textAlign: \"center\" }}>\n\t\t\t\t\tLoading...!\n\t\t\t\t</p>\n\t\t\t);\n\t\t}\n\t\tif (this.state.loadedPost && this.state.loadedPost.title) {\n\t\t\tpost = (\n\t\t\t\t<Col className=\"FullPost\" data-test=\"loadedPost-div\">\n\t\t\t\t\t<h6>{this.state.loadedPost.title}</h6>\n\t\t\t\t\t<p>{this.state.loadedPost.body}</p>\n\t\t\t\t\t<div className=\"Edit\">\n\t\t\t\t\t\t<button onClick={this.deletePostHandler} className=\"Delete\">\n\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</Col>\n\t\t\t);\n\t\t}\n\t\treturn post;\n\t}\n}\n\nexport default FullPost;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Col, Button, Form } from \"react-bootstrap\";\n\nimport \"./NewPost.css\";\n\nclass NewPost extends Component {\n\tstate = {\n\t\ttitle: \"\",\n\t\tcontent: \"\",\n\t\tauthor: \"Varun\",\n\t};\n\n\tpostDataHandler = () => {\n\t\tconst data = {\n\t\t\ttitle: this.state.title,\n\t\t\tcontent: this.state.content,\n\t\t\tauthor: this.state.author,\n\t\t};\n\t\taxios\n\t\t\t.post(\"https://jsonplaceholder.typicode.com/posts/\", data)\n\t\t\t.then((response) => {});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Col className=\"NewPost\">\n\t\t\t\t<Form>\n\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t<Col xs={12}>Add a Post</Col>\n\t\t\t\t\t\t<Form.Group as={Col} md=\"4\" xs=\"12\">\n\t\t\t\t\t\t\t<Form.Label>Title</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tvalue={this.state.title}\n\t\t\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\t\t\tthis.setState({ title: event.target.value })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group as={Col} md=\"4\" xs=\"12\">\n\t\t\t\t\t\t\t<Form.Label>Content</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tas=\"textarea\"\n\t\t\t\t\t\t\t\trows={3}\n\t\t\t\t\t\t\t\tvalue={this.state.content}\n\t\t\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\t\t\tthis.setState({ content: event.target.value })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group as={Col} md=\"4\" xs=\"12\">\n\t\t\t\t\t\t\t<Form.Label>Author</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tas=\"select\"\n\t\t\t\t\t\t\t\tvalue={this.state.author}\n\t\t\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\t\t\tthis.setState({ author: event.target.value })\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option value=\"Varun\">Varun</option>\n\t\t\t\t\t\t\t\t<option value=\"Manu\">Manu</option>\n\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form.Row>\n\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t<Col xs={12}>\n\t\t\t\t\t\t\t<Button onClick={this.postDataHandler}>Add Post</Button>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Form.Row>\n\t\t\t\t</Form>\n\t\t\t</Col>\n\t\t);\n\t}\n}\n\nexport default NewPost;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Col, Row, Button } from \"react-bootstrap\";\nimport Post from \"../../components/Post/Post\";\nimport FullPost from \"../../components/FullPost/FullPost\";\nimport NewPost from \"../../components/NewPost/NewPost\";\nimport \"./Blog.css\";\n\nconst Blog = () => {\n\tconst [posts, setPosts] = useState([]);\n\tconst [postsDisplay, setPostsDisplay] = useState([]);\n\tconst [selectedPostId, setSelectedPostId] = useState(null);\n\tconst [displayCount, setDisplayCount] = useState(4);\n\n\tuseEffect(() => {\n\t\taxios.get(\"https://jsonplaceholder.typicode.com/posts\").then((response) => {\n\t\t\tconst postsResponse = response.data;\n\t\t\tconst updatedPosts = postsResponse.map((post) => {\n\t\t\t\treturn {\n\t\t\t\t\t...post,\n\t\t\t\t\tauthor: \"Varun\",\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetPosts(updatedPosts);\n\t\t\t// console.log( response );\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsetPostsDisplay(posts.slice(0, displayCount));\n\t}, [posts, displayCount]);\n\n\tconst postSelectedHandler = (id) => {\n\t\tsetSelectedPostId(id);\n\t};\n\n\tconst loadMore = () => {\n\t\tsetDisplayCount(displayCount + 4);\n\t};\n\n\tconst postsDisplayDiv = postsDisplay.map((post) => {\n\t\treturn (\n\t\t\t<Post\n\t\t\t\tkey={post.id}\n\t\t\t\ttitle={post.title}\n\t\t\t\tauthor={post.author}\n\t\t\t\tcontent={post.body}\n\t\t\t\tclicked={() => postSelectedHandler(post.id)}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12}>\n\t\t\t\t\t<h2>Add Articles</h2>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12}>\n\t\t\t\t\t<p>Articles can be added with title and content</p>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>{postsDisplayDiv}</Row>\n\t\t\t<Row>\n\t\t\t\t<Col className=\"LoadMoreDiv\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses={\"LoadMore\"}\n\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\tonClick={() => loadMore()}\n\t\t\t\t\t>\n\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\tLoad More{\" \"}\n\t\t\t\t\t</Button>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<FullPost id={selectedPostId} />\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<NewPost />\n\t\t\t</Row>\n\t\t</>\n\t);\n};\n\nexport default Blog;\n","import React, { Component } from \"react\";\n\nimport Blog from \"./containers/Blog/Blog\";\nimport Container from \"react-bootstrap/Container\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Blog />\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}