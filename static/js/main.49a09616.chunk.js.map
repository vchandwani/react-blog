{"version":3,"sources":["components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","utils/loadPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["Post","props","useState","characterLength","setCharacterLength","fullRead","setFullRead","Col","xs","sm","className","onClick","clicked","data-test","Card","classNames","Body","Title","title","length","substring","Text","content","Button","variant","FullPost","deletePostHandler","a","axios","delete","id","then","response","console","log","loading","style","textAlign","loadedPost","body","NewPost","state","author","postDataHandler","data","post","Form","Row","Group","as","md","Label","Control","type","value","this","onChange","event","setState","target","rows","Component","loadPost","get","status","Error","Blog","posts","setPosts","postsDisplay","setPostsDisplay","selectedPostId","setSelectedPostId","displayCount","setDisplayCount","setLoadedPost","setLoading","useEffect","updatedPosts","map","slice","loadData","postsDisplayDiv","key","Fragment","classes","App","Container","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.49a09616.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Col, Card, Button } from \"react-bootstrap\";\r\nimport \"./Post.css\";\r\nimport classNames from \"classnames\";\r\n\r\nconst Post = (props) => {\r\n\tconst [characterLength, setCharacterLength] = useState(20);\r\n\tconst [fullRead, setFullRead] = useState(false);\r\n\r\n\tconst readMore = () => {\r\n\t\tsetCharacterLength(255);\r\n\t\tsetFullRead(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Col\r\n\t\t\txs={12}\r\n\t\t\tsm={4}\r\n\t\t\tclassName={\"mt-1 mb-1\"}\r\n\t\t\tonClick={props.clicked}\r\n\t\t\tdata-test=\"post-div\"\r\n\t\t>\r\n\t\t\t<Card className={classNames(\"PostDiv\", fullRead && \"Height100\")}>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<Card.Title data-test=\"post-title\">\r\n\t\t\t\t\t\t{props.title.length > characterLength\r\n\t\t\t\t\t\t\t? props.title.substring(0, characterLength)\r\n\t\t\t\t\t\t\t: props.title}\r\n\t\t\t\t\t</Card.Title>\r\n\t\t\t\t\t<Card.Text data-test=\"post-content\">\r\n\t\t\t\t\t\t{props.content.length > characterLength\r\n\t\t\t\t\t\t\t? props.content.substring(0, characterLength)\r\n\t\t\t\t\t\t\t: props.content}\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tdata-test=\"post-button\"\r\n\t\t\t\t\t\tclassName=\"ReadMore\"\r\n\t\t\t\t\t\tvariant=\"primary\"\r\n\t\t\t\t\t\tonClick={readMore}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRead more\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</Card>\r\n\t\t</Col>\r\n\t);\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { Col } from \"react-bootstrap\";\r\n\r\nimport \"./FullPost.css\";\r\n\r\nconst FullPost = (props) => {\r\n\tconst deletePostHandler = async () => {\r\n\t\tawait axios\r\n\t\t\t.delete(\"https://jsonplaceholder.typicode.com/posts/\" + props.id)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn props.loading ? (\r\n\t\t<p data-test=\"loading-div\" style={{ textAlign: \"center\" }}>\r\n\t\t\tLoading...!\r\n\t\t</p>\r\n\t) : props.loadedPost.title ? (\r\n\t\t<Col className=\"FullPost\" data-test=\"loadedPost-div\">\r\n\t\t\t<h6 data-test=\"loadedPost-title\">{props.loadedPost.title}</h6>\r\n\t\t\t<p data-test=\"loadedPost-body\">{props.loadedPost.body}</p>\r\n\t\t\t<div className=\"Edit\">\r\n\t\t\t\t<button onClick={() => deletePostHandler} className=\"Delete\">\r\n\t\t\t\t\tDelete\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</Col>\r\n\t) : (\r\n\t\t<p data-test=\"noResult-div\" style={{ textAlign: \"center\" }}>\r\n\t\t\tPlease select a Post!\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default FullPost;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Col, Button, Form } from \"react-bootstrap\";\r\n\r\nimport \"./NewPost.css\";\r\n\r\nclass NewPost extends Component {\r\n\tstate = {\r\n\t\ttitle: \"\",\r\n\t\tcontent: \"\",\r\n\t\tauthor: \"Varun\",\r\n\t};\r\n\r\n\tpostDataHandler = () => {\r\n\t\tconst data = {\r\n\t\t\ttitle: this.state.title,\r\n\t\t\tcontent: this.state.content,\r\n\t\t\tauthor: this.state.author,\r\n\t\t};\r\n\t\taxios\r\n\t\t\t.post(\"https://jsonplaceholder.typicode.com/posts/\", data)\r\n\t\t\t.then((response) => {});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Col className=\"NewPost\">\r\n\t\t\t\t<Form>\r\n\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t<Col xs={12}>Add a Post</Col>\r\n\t\t\t\t\t\t<Form.Group as={Col} md=\"4\" xs=\"12\">\r\n\t\t\t\t\t\t\t<Form.Label>Title</Form.Label>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\t\t\t\t\tthis.setState({ title: event.target.value })\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t<Form.Group as={Col} md=\"4\" xs=\"12\">\r\n\t\t\t\t\t\t\t<Form.Label>Content</Form.Label>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\t\t\t\trows={3}\r\n\t\t\t\t\t\t\t\tvalue={this.state.content}\r\n\t\t\t\t\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\t\t\t\t\tthis.setState({ content: event.target.value })\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t<Form.Group as={Col} md=\"4\" xs=\"12\">\r\n\t\t\t\t\t\t\t<Form.Label>Author</Form.Label>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.author}\r\n\t\t\t\t\t\t\t\tonChange={(event) =>\r\n\t\t\t\t\t\t\t\t\tthis.setState({ author: event.target.value })\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<option value=\"Varun\">Varun</option>\r\n\t\t\t\t\t\t\t\t<option value=\"Manu\">Manu</option>\r\n\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t</Form.Row>\r\n\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t<Col xs={12}>\r\n\t\t\t\t\t\t\t<Button onClick={this.postDataHandler}>Add Post</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Form.Row>\r\n\t\t\t\t</Form>\r\n\t\t\t</Col>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NewPost;\r\n","import axios from \"axios\";\r\n\r\nasync function loadPost(id) {\r\n\ttry {\r\n\t\tconst response = await axios.get(\r\n\t\t\t\"https://jsonplaceholder.typicode.com/posts/\" + id\r\n\t\t);\r\n\t\tif (response.status === 200 && response.data) {\r\n\t\t\t// response - object, eg { status: 200, message: 'OK' }\r\n\t\t\treturn response.data;\r\n\t\t} else {\r\n\t\t\tthrow Error(\"Error\");\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tthrow Error(\"Error\");\r\n\t}\r\n}\r\n\r\nexport { loadPost };\r\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Col, Row, Button } from 'react-bootstrap';\nimport Post from '../../components/Post/Post';\nimport FullPost from '../../components/FullPost/FullPost';\nimport NewPost from '../../components/NewPost/NewPost';\nimport './Blog.css';\nimport { loadPost } from '../../utils/loadPost';\n\nconst Blog = () => {\n\tconst [posts, setPosts] = useState([]);\n\tconst [postsDisplay, setPostsDisplay] = useState([]);\n\tconst [selectedPostId, setSelectedPostId] = useState(null);\n\tconst [displayCount, setDisplayCount] = useState(4);\n\tconst [loadedPost, setLoadedPost] = useState({});\n\tconst [loading, setLoading] = useState(false);\n\n\tuseEffect(() => {\n\t\taxios.get('https://jsonplaceholder.typicode.com/posts').then((response) => {\n\t\t\tconst postsResponse = response.data;\n\t\t\tconst updatedPosts = postsResponse.map((post) => {\n\t\t\t\treturn {\n\t\t\t\t\t...post,\n\t\t\t\t\tauthor: 'Varun',\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetPosts(updatedPosts);\n\t\t\t// console.log( response );\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsetPostsDisplay(posts.slice(0, displayCount));\n\t}, [posts, displayCount]);\n\n\tuseEffect(() => {\n\t\t//Make call to fetch data\n\t\tif (selectedPostId) {\n\t\t\tconst loadData = async () => {\n\t\t\t\tif (!loadedPost || (loadedPost && loadedPost.id !== selectedPostId)) {\n\t\t\t\t\tsetLoading(true);\n\t\t\t\t\tconst data = await loadPost(selectedPostId);\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tsetLoadedPost(data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetLoadedPost({});\n\t\t\t\t\t}\n\t\t\t\t\tsetLoading(false);\n\t\t\t\t}\n\t\t\t};\n\t\t\tloadData();\n\t\t}\n\t}, [selectedPostId]);\n\tconst postSelectedHandler = (id) => {\n\t\tsetSelectedPostId(id);\n\t};\n\n\tconst loadMore = () => {\n\t\tsetDisplayCount(displayCount + 4);\n\t};\n\n\tconst postsDisplayDiv = postsDisplay.map((post) => {\n\t\treturn (\n\t\t\t<Post\n\t\t\t\tkey={post.id}\n\t\t\t\ttitle={post.title}\n\t\t\t\tauthor={post.author}\n\t\t\t\tcontent={post.body}\n\t\t\t\tclicked={() => postSelectedHandler(post.id)}\n\t\t\t/>\n\t\t);\n\t});\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12}>\n\t\t\t\t\t<h2>Add Articles!</h2>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12}>\n\t\t\t\t\t<p>Articles can be added with title and content</p>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>{postsDisplayDiv}</Row>\n\t\t\t<Row>\n\t\t\t\t<Col className=\"LoadMoreDiv\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclasses={'LoadMore'}\n\t\t\t\t\t\tvariant=\"secondary\"\n\t\t\t\t\t\tonClick={() => loadMore()}\n\t\t\t\t\t>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\tLoad More{' '}\n\t\t\t\t\t</Button>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<FullPost\n\t\t\t\t\tid={selectedPostId}\n\t\t\t\t\tloadedPost={loadedPost}\n\t\t\t\t\tloading={loading}\n\t\t\t\t/>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<NewPost />\n\t\t\t</Row>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Blog;\n","import React, { Component } from 'react';\n\nimport Blog from './containers/Blog/Blog';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Blog />\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}